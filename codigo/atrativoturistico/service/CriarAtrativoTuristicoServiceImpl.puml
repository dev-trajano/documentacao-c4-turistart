@startuml
!define C4_COMPONENT
!include <C4/C4_Component.puml>

Container(app, "inovaturpb-api", "Aplicação Spring Boot")

' Serviço principal
Component(service, "CriarAtrativoTuristicoServiceImpl", "Serviço de Criação de Atrativos Turísticos", "Gerencia a criação de novos atrativos turísticos no sistema")

' Repositórios e Componentes Auxiliares
Component(repository, "AtrativoTuristicoRepository", "Repositório de Atrativos Turísticos", "Interface para operações no banco de dados de atrativos turísticos")
Component(municipioRepo, "MunicipioRepository", "Repositório de Municípios", "Interface para operações no banco de dados de municípios")
Component(util, "ConversorAtrativoTuristicoUtil", "Utilitário", "Converte entidades entre DTOs e modelos")
Component(dtoIn, "CriarAtrativoTuristicoDTO", "DTO de Entrada", "Contém os dados para criação de um novo atrativo turístico")
Component(dtoOut, "AtrativoTuristicoDTO", "DTO de Saída", "Representa o atrativo turístico criado")

' Cache
Component(cache, "CacheService", "Gerenciador de Cache", "Invalida entradas relacionadas a atrativos turísticos e municípios")

' Método principal
Component(method, "criarAtrativoTuristico", "Método", "Realiza a criação de um novo atrativo turístico com base nos dados fornecidos")

' Fluxos Alternativos e Erros
Component(errorFlow, "Fluxo de Erro", "Fluxo", "Lida com casos de erro, como dados inválidos ou falhas no banco")

' Relacionamentos
Rel(service, method, "Define", "Gerencia lógica de criação de atrativos")
Rel(method, dtoIn, "Recebe", "Dados de entrada para criação")
Rel(method, repository, "Usa", "Salva o atrativo turístico criado")
Rel(method, municipioRepo, "Usa", "Verifica e cria municípios, se necessário")
Rel(method, util, "Usa", "Converte os dados para DTO")
Rel(method, cache, "Evita", "Invalida caches relacionados")
Rel(method, dtoOut, "Retorna", "Atrativo turístico criado")
Rel(method, errorFlow, "Chama", "Fluxo alternativo em caso de erro")

@enduml
